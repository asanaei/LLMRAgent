R/00_utils.R:1:1: style: [trailing_whitespace_linter] Remove trailing whitespace.
    
^~~~
R/00_utils.R:2:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Internal Utilities
~~~^
R/00_utils.R:8:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Internal logger
~~~^
R/00_utils.R:16:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Validate that an object is JSON-serializable
~~~^
R/00_utils.R:26:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Estimate tokens (very rough character-based heuristic)
~~~^
R/01_message.R:1:1: style: [trailing_whitespace_linter] Remove trailing whitespace.
    
^~~~
R/01_message.R:2:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Create a chat message
~~~^
R/01_message.R:17:6: style: [indentation_linter] Indentation should be 2 spaces but is 6 spaces.
      stopifnot(role %in% c("system", "user", "assistant"))
  ~~~^
R/01_message.R:32:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Format messages for LLM API calls
~~~^
R/02_tool_registry.R:1:1: style: [trailing_whitespace_linter] Remove trailing whitespace.
    
^~~~
R/02_tool_registry.R:2:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Tool and Tool Registry
~~~^
R/02_tool_registry.R:10:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 91 characters.
    #' - Thread-safe for base-R single-threaded code. No promises under forked parallelism.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~
R/02_tool_registry.R:12:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 125 characters.
    #' @seealso [register_basic_tools()], [register_tool()], [unregister_tool()], [list_tools()], [get_tool()], [call_tool()]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
R/02_tool_registry.R:16:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Create a Tool
~~~^
R/02_tool_registry.R:46:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' @keywords internal
~~~^
R/02_tool_registry.R:54:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 99 characters.
      if (length(missing_req)) stop("Missing required args: ", paste(missing_req, collapse = ", "))
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
R/02_tool_registry.R:56:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 81 characters.
      if (length(extra)) stop("Unexpected args: ", paste(extra, collapse = ", "))
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
R/02_tool_registry.R:60:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Execute a Tool (internal)
~~~^
R/02_tool_registry.R:73:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Register a tool globally
~~~^
R/02_tool_registry.R:80:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 81 characters.
      if (tool$name %in% names(reg)) stop("Tool already registered: ", tool$name)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
R/02_tool_registry.R:86:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Unregister a tool globally
~~~^
R/02_tool_registry.R:102:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Get a tool by name
~~~^
R/02_tool_registry.R:111:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' List all registered tools
~~~^
R/02_tool_registry.R:117:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 93 characters.
      if (!length(reg)) return(tibble::tibble(name = character(), description = character()))
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~
R/02_tool_registry.R:125:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Clear all registered tools
~~~^
R/02_tool_registry.R:126:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 84 characters.
    #' @seealso [list_tools()], [register_tool()], [unregister_tool()], [get_tool()]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
R/02_tool_registry.R:133:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Call a registered tool by name (manual invocation)
~~~^
R/02_tool_registry.R:143:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 82 characters.
    #' register_tool(make_tool("hello", "say hello", list(), function(args) "hi"))
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
R/03_memory.R:1:1: style: [trailing_whitespace_linter] Remove trailing whitespace.
    
^~~~
R/03_memory.R:2:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Memory Interfaces
~~~^
R/03_memory.R:8:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Create a new BufferMemory
~~~^
R/03_memory.R:38:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Summary Memory (stub)
~~~^
R/03_memory.R:40:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 86 characters.
    #' A conservative interface for future summarising memory. This stub intentionally
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
R/03_memory.R:41:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 85 characters.
    #' avoids calling any external LLMs. Methods emit a warning when not implemented.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~
R/03_memory.R:44:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 91 characters.
    #' @return An environment with a stable interface: `$add(msg)`, `$get()`, `$summary()`.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~
R/03_memory.R:61:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 85 characters.
        warning("SummaryMemory is not implemented yet; returning last user message.")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~
R/10_agent.R:1:1: style: [trailing_whitespace_linter] Remove trailing whitespace.
    
^~~~
R/10_agent.R:2:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Minimal Agent (no external LLMs)
~~~^
R/10_agent.R:9:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 82 characters.
    #' @param llm_adapter Optional function `(messages, tools) -> list(text=...)`.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
R/10_agent.R:17:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 99 characters.
    new_agent <- function(system_prompt = "", memory = new_buffer_memory(10), llm_adapter = NULL) {
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
R/10_agent.R:25:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Ask the agent to reply
~~~^
R/10_agent.R:33:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 81 characters.
    #' @seealso [new_agent()], [format_messages_for_api()], [new_buffer_memory()]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
R/11_adapter_llmr.R:3:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 84 characters.
#' Creates a small adapter function suitable for `new_agent(llm_adapter = ...)` that
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
R/11_adapter_llmr.R:5:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 81 characters.
#' core `LLMRAgent` package free of network calls while making integration easy.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
R/11_adapter_llmr.R:31:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 103 characters.
    stop("Package 'LLMR' is required for this adapter. Install it to enable network-backed LLM calls.")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~
R/11_adapter_llmr.R:35:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 82 characters.
    cfg <- LLMR::llm_config(provider = provider, model = model, api_key = api_key)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
R/11_adapter_llmr.R:44:1: style: [trailing_blank_lines_linter] Remove trailing blank lines.

^
R/30_tools_basic.R:1:1: style: [trailing_whitespace_linter] Remove trailing whitespace.
    
^~~~
R/30_tools_basic.R:2:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    #' Register basic built-in tools
~~~^
R/30_tools_basic.R:4:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 87 characters.
    #' Provides opt-in registration for conservative tools: `web_search`, `wiki_fetch`,
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
R/30_tools_basic.R:5:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 82 characters.
    #' and `execute_r`. Network tools require both `enable_network = TRUE` and the
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
R/30_tools_basic.R:8:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 85 characters.
    #' @param enable_network Logical. If TRUE, allows HTTP tools to perform requests.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~
R/30_tools_basic.R:12:7: style: [trailing_whitespace_linter] Remove trailing whitespace.
    #' 
      ^
R/30_tools_basic.R:25:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 99 characters.
        description = "Search the web (SerpAPI key required; opt-in). Returns top titles + links.",
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
R/30_tools_basic.R:26:40: style: [infix_spaces_linter] Put spaces around all infix operators.
        parameters = list(q = list(type="string", required=TRUE), num = list(type="number", required=FALSE)),
                                       ^
R/30_tools_basic.R:26:59: style: [infix_spaces_linter] Put spaces around all infix operators.
        parameters = list(q = list(type="string", required=TRUE), num = list(type="number", required=FALSE)),
                                                          ^
R/30_tools_basic.R:26:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 109 characters.
        parameters = list(q = list(type="string", required=TRUE), num = list(type="number", required=FALSE)),
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
R/30_tools_basic.R:26:82: style: [infix_spaces_linter] Put spaces around all infix operators.
        parameters = list(q = list(type="string", required=TRUE), num = list(type="number", required=FALSE)),
                                                                                 ^
R/30_tools_basic.R:26:101: style: [infix_spaces_linter] Put spaces around all infix operators.
        parameters = list(q = list(type="string", required=TRUE), num = list(type="number", required=FALSE)),
                                                                                                    ^
R/30_tools_basic.R:28:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 90 characters.
          if (!isTRUE(getOption("LLMRAgent.enable_network", FALSE)) || !enable_network) {
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
R/30_tools_basic.R:29:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 133 characters.
            stop("Network-disabled: set options(LLMRAgent.enable_network=TRUE) and call register_basic_tools(enable_network=TRUE).")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
R/30_tools_basic.R:31:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 86 characters.
          if (!requireNamespace("httr2", quietly = TRUE)) stop("httr2 not installed.")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
R/30_tools_basic.R:37:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 87 characters.
            httr2::req_url_query(q = q, engine = "google", api_key = key, num = num) |>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
R/30_tools_basic.R:42:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 107 characters.
          lines <- vapply(items, function(it) sprintf("- %s\n  %s", it$title %||% "", it$link %||% ""), "")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
R/30_tools_basic.R:48:6: style: [indentation_linter] Indentation should be 2 spaces but is 6 spaces.
      # wiki_fetch (Wikipedia REST)
  ~~~^
R/30_tools_basic.R:52:44: style: [infix_spaces_linter] Put spaces around all infix operators.
        parameters = list(title = list(type="string", required=TRUE)),
                                           ^
R/30_tools_basic.R:52:63: style: [infix_spaces_linter] Put spaces around all infix operators.
        parameters = list(title = list(type="string", required=TRUE)),
                                                              ^
R/30_tools_basic.R:54:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 90 characters.
          if (!isTRUE(getOption("LLMRAgent.enable_network", FALSE)) || !enable_network) {
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
R/30_tools_basic.R:55:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 133 characters.
            stop("Network-disabled: set options(LLMRAgent.enable_network=TRUE) and call register_basic_tools(enable_network=TRUE).")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
R/30_tools_basic.R:57:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 86 characters.
          if (!requireNamespace("httr2", quietly = TRUE)) stop("httr2 not installed.")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
R/30_tools_basic.R:59:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 87 characters.
          url <- sprintf("https://en.wikipedia.org/api/rest_v1/page/summary/%s", title)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
R/30_tools_basic.R:69:6: style: [indentation_linter] Indentation should be 2 spaces but is 6 spaces.
      # execute_r (sandboxed)
  ~~~^
R/30_tools_basic.R:72:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 104 characters.
        description = "Execute small R code snippets safely with time limits; returns captured output.",
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
R/30_tools_basic.R:73:43: style: [infix_spaces_linter] Put spaces around all infix operators.
        parameters = list(code = list(type="string", required=TRUE)),
                                          ^
R/30_tools_basic.R:73:62: style: [infix_spaces_linter] Put spaces around all infix operators.
        parameters = list(code = list(type="string", required=TRUE)),
                                                             ^
R/30_tools_basic.R:80:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 88 characters.
          on.exit(setTimeLimit(cpu = Inf, elapsed = Inf, transient = FALSE), add = TRUE)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~
R/30_tools_basic.R:86:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 82 characters.
          safe_env$download.file <- function(...) stop("download.file() disabled")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
R/30_tools_basic.R:94:6: style: [indentation_linter] Indentation should be 2 spaces but is 6 spaces.
      ids <- character()
  ~~~^
tests/testthat/test_execute_r.R:12:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 83 characters.
  expect_error(call_tool("execute_r", list(code = "file.remove('x')")), "disabled")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
tests/testthat/test_execute_r.R:13:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 96 characters.
  expect_error(call_tool("execute_r", list(code = "download.file('http://x','y')")), "disabled")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~
tests/testthat/test_execute_r.R:15:1: style: [trailing_blank_lines_linter] Remove trailing blank lines.

^
tests/testthat/test_llm_adapter.R:2:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 91 characters.
  skip_if(requireNamespace("LLMR", quietly = TRUE), "LLMR installed; skip error-path test")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~
tests/testthat/test_llm_adapter.R:12:1: style: [trailing_blank_lines_linter] Remove trailing blank lines.

^
tests/testthat/test_memory_agent.R:1:1: style: [trailing_whitespace_linter] Remove trailing whitespace.
    
^~~~
tests/testthat/test_memory_agent.R:2:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    test_that("buffer memory keeps last n", {
~~~^
tests/testthat/test_memory_agent.R:4:37: style: [commas_linter] Put a space after a comma.
      mem$add(create_message("user","a"))
                                    ^
tests/testthat/test_memory_agent.R:5:37: style: [commas_linter] Put a space after a comma.
      mem$add(create_message("user","b"))
                                    ^
tests/testthat/test_memory_agent.R:6:37: style: [commas_linter] Put a space after a comma.
      mem$add(create_message("user","c"))
                                    ^
tests/testthat/test_memory_agent.R:10:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    test_that("agent_reply echoes deterministically", {
~~~^
tests/testthat/test_messages.R:1:1: style: [trailing_whitespace_linter] Remove trailing whitespace.
    
^~~~
tests/testthat/test_messages.R:2:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    test_that("create_message works", {
~~~^
tests/testthat/test_messages.R:3:34: style: [commas_linter] Put a space after a comma.
      m <- create_message("user","hi")
                                 ^
tests/testthat/test_messages.R:9:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    test_that("format_messages_for_api strips extras", {
~~~^
tests/testthat/test_messages.R:10:42: style: [commas_linter] Put a space after a comma.
      msgs <- list(create_message("user","hi", name="bob"))
                                         ^
tests/testthat/test_messages.R:10:52: style: [infix_spaces_linter] Put spaces around all infix operators.
      msgs <- list(create_message("user","hi", name="bob"))
                                                   ^
tests/testthat/test_network_guards.R:4:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 82 characters.
  expect_error(call_tool("web_search", list(q = "r project")), "Network-disabled")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
tests/testthat/test_network_guards.R:5:81: style: [line_length_linter] Lines should not be more than 80 characters. This line is 101 characters.
  expect_error(call_tool("wiki_fetch", list(title = "R_(programming_language)")), "Network-disabled")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
tests/testthat/test_network_guards.R:7:1: style: [trailing_blank_lines_linter] Remove trailing blank lines.

^
tests/testthat/test_summary_memory.R:9:1: style: [trailing_blank_lines_linter] Remove trailing blank lines.

^
tests/testthat/test_tools.R:1:4: style: [indentation_linter] Indentation should be 0 spaces but is 4 spaces.
    test_that("tool registry basic ops", {
~~~^
tests/testthat/test_tools.R:3:30: style: [commas_linter] Put a space after a comma.
      t <- make_tool("hello","say hi", list(), function(args) "hi")
                             ^
